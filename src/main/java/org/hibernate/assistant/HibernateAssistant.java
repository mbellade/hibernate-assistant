package org.hibernate.assistant;

import org.hibernate.SessionFactory;
import org.hibernate.SharedSessionContract;
import org.hibernate.query.SelectionQuery;

/**
 * Hibernate Assistant allows interacting with an underlying LLM to help you retrieve persistent data.
 * It leverages Hibernate ORM's mapping models, query language, cross-platform support and
 * enhanced security features to make access to information stored in relational databases
 * as easy as a natural language prompt.
 */
public interface HibernateAssistant {
	/**
	 * Creates a {@link SelectionQuery} by providing the specified natural language {@code message} to the LLM
	 * and interpreting the obtained response.
	 *
	 * @param message the natural language prompt
	 * @param session Hibernate session
	 *
	 * @return the {@link SelectionQuery} generated by the LLM
	 */
	default SelectionQuery<?> createAiQuery(String message, SharedSessionContract session) {
		return createAiQuery( message, session, null );
	}

	/**
	 * Creates a {@link SelectionQuery} by providing the specified natural language {@code message} to the LLM
	 * and interpreting the obtained response.
	 *
	 * @param message the natural language prompt
	 * @param session Hibernate session
	 * @param resultType The {@link Class} representing the expected query result type
	 *
	 * @return the {@link SelectionQuery} generated by the LLM
	 */
	<T> SelectionQuery<T> createAiQuery(String message, SharedSessionContract session, Class<T> resultType);

	/**
	 * Prompts the underlying LLM with the provided natural language message and tries to answer it with
	 * data extracted from the database through the persistence model.
	 *
	 * @param message the natural language request
	 * @param sessionFactory Hibernate session factory
	 *
	 * @return a natural language response based on the results of the query
	 */
	String executeQuery(String message, SessionFactory sessionFactory);

	/**
	 * Executes the given {@link SelectionQuery}, and provides a natural language
	 * response by passing the resulting data back to the underlying LLM.
	 * <p>
	 * To directly obtain a natural language response from a natural language prompt,
	 * you can use {@link #executeQuery(String, SessionFactory)} instead.
	 * <p>
	 * If you wish to execute the query manually and obtain the structured results yourself,
	 * you should use {@link SelectionQuery}'s direct execution methods, e.g. {@link SelectionQuery#getResultList()}
	 * or {@link SelectionQuery#getSingleResult()}.
	 *
	 * @param query the AI query to execute
	 * @param session the session in which to execute the query
	 *
	 * @return a natural language response based on the results of the query
	 */
	String executeQuery(SelectionQuery<?> query, SharedSessionContract session);

	/**
	 * Reset the assistant's current chat context. This can be helpful when
	 * creating a new {@link SelectionQuery} that should not rely on the context
	 * of previous requests.
	 */
	void clear();
}
